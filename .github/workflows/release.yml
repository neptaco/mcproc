name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to test (without v prefix)'
        required: true
        default: '0.1.1'

permissions:
  contents: write

jobs:
  setup:
    name: Setup version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
          fi

  build-linux:
    name: Build ${{ matrix.target }}
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
    
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-${{ matrix.target }}-
            ${{ runner.os }}-cargo-build-

      - name: Cache cross docker images
        uses: actions/cache@v4
        with:
          path: ~/.docker
          key: cross-docker-${{ matrix.target }}-${{ hashFiles('Cross.toml') }}
          restore-keys: |
            cross-docker-${{ matrix.target }}-
            cross-docker-

      - name: Install protobuf compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install cross
        uses: actions-rs/install@v0.1
        with:
          crate: cross
          version: latest
          use-tool-cache: true

      - name: Setup sccache
        run: |
          mkdir -p ~/.cache/sccache
          echo "SCCACHE_DIR=$HOME/.cache/sccache" >> $GITHUB_ENV

      - name: Cache sccache
        uses: actions/cache@v4
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-sccache-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-sccache-${{ matrix.target }}-
            ${{ runner.os }}-sccache-

      - name: Build for ${{ matrix.target }}
        run: cross build --release --target ${{ matrix.target }}
        
      - name: Print sccache stats
        run: |
          echo "Checking sccache stats..."
          if cross run --target ${{ matrix.target }} --bin sccache -- --show-stats 2>/dev/null; then
            echo "sccache stats retrieved"
          else
            echo "sccache stats not available (this is normal for cross builds)"
          fi

      - name: Create release archive
        run: |
          mkdir -p releases
          tar -czf releases/mcproc-${{ needs.setup.outputs.version }}-${{ matrix.target }}.tar.gz \
            -C target/${{ matrix.target }}/release mcproc

      - name: Generate checksum
        run: |
          cd releases
          sha256sum mcproc-${{ needs.setup.outputs.version }}-${{ matrix.target }}.tar.gz > \
            mcproc-${{ needs.setup.outputs.version }}-${{ matrix.target }}.tar.gz.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mcproc-${{ matrix.target }}
          path: releases/*
          retention-days: 7

  build-macos:
    name: Build ${{ matrix.target }}
    needs: setup
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-13
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
    
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-${{ matrix.target }}-
            ${{ runner.os }}-cargo-build-

      - name: Install protobuf compiler
        run: brew install protobuf

      - name: Build for ${{ matrix.target }}
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create release archive
        run: |
          mkdir -p releases
          tar -czf releases/mcproc-${{ needs.setup.outputs.version }}-${{ matrix.target }}.tar.gz \
            -C target/${{ matrix.target }}/release mcproc

      - name: Generate checksum
        run: |
          cd releases
          shasum -a 256 mcproc-${{ needs.setup.outputs.version }}-${{ matrix.target }}.tar.gz > \
            mcproc-${{ needs.setup.outputs.version }}-${{ matrix.target }}.tar.gz.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mcproc-${{ matrix.target }}
          path: releases/*
          retention-days: 7

  release:
    name: Create Release
    needs: [build-linux, build-macos, setup]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Flatten artifacts
        run: |
          mkdir -p release-files
          find artifacts -name "*.tar.gz*" -exec cp {} release-files/ \;

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-files/*
          tag_name: "v${{ needs.setup.outputs.version }}"
          draft: ${{ github.event_name == 'workflow_dispatch' }}
          prerelease: ${{ github.event_name == 'workflow_dispatch' }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}